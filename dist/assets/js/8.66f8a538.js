(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{194:function(e,a,t){"use strict";t.r(a);var l=t(0),p=Object(l.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"学习rollup背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习rollup背景","aria-hidden":"true"}},[e._v("#")]),e._v(" 学习Rollup背景")]),e._v(" "),t("p",[e._v("当Rollup出来时，个人内心是拒绝的。我个人对webpack还算了解。所以，在编写一些公共库时，基本上是用webpack来打包，编译出目标文件。后面公司有越来越多的小程序项目，在开发小程序的过程中，意识到Rollup的特性比webpack更加适合用来构建公共库。")]),e._v(" "),t("h2",{attrs:{id:"webpack编译的不足"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack编译的不足","aria-hidden":"true"}},[e._v("#")]),e._v(" webpack编译的不足")]),e._v(" "),t("p",[e._v("webpack的最大的问题就在于会把依赖库打包到编译后的文件里面，如果业务代码和公共库有相同的依赖，那么会出现多次打包相同的依赖，也就是说编译之后的文件存在两份相同依赖代码，这会造成编译后代码的Size大大增加，运行时，内存消耗也会增加，性能大大降低。")]),e._v(" "),t("p",[e._v("要解决这个不足，可以通过编写webpack插件来解决，插件机制给webpack带来了无限可能；第二种就是更换编译工具，使用Rollup。")]),e._v(" "),t("p",[e._v("经过一轮的思想挣扎，选择了Rollup。Rollup开箱即用，编译之后的库更加纯粹，自带tree-shaking，插件机制，支持产出esm(es6)格式的库，这也是Rollup使用量越来越多的原因。")])])},[],!1,null,null,null);a.default=p.exports}}]);